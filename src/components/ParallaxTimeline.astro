import { getCollection } from 'astro:content';
import TimelineItem from './TimelineItem.astro';

// Get all timeline entries, sorted by date (newest first)
const timelineEntries = await getCollection('timeline');
const sortedEntries = timelineEntries.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

<section id="timeline" class="relative min-h-screen py-20">
  <!-- Background with parallax effect -->
  <div class="absolute inset-0 bg-gradient-to-br from-slate-900 via-slate-950 to-slate-900">
    <!-- Animated background elements -->
    <div class="absolute inset-0 overflow-hidden">
      <div class="parallax-bg-1 absolute w-96 h-96 bg-cyan-500/5 rounded-full blur-3xl -top-48 -left-48"></div>
      <div class="parallax-bg-2 absolute w-96 h-96 bg-purple-500/5 rounded-full blur-3xl top-1/2 -right-48"></div>
      <div class="parallax-bg-3 absolute w-96 h-96 bg-blue-500/5 rounded-full blur-3xl bottom-0 left-1/3"></div>
    </div>
  </div>

  <div class="relative z-10 max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Section Header -->
    <div class="text-center mb-16">
      <h2 class="text-4xl md:text-5xl font-bold text-white mb-6">
        Meine <span class="bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent">Journey</span>
      </h2>
      <p class="text-xl text-slate-300 max-w-2xl mx-auto">
        Entdecken Sie meine berufliche Laufbahn, Projekte und Meilensteine in einer interaktiven Timeline
      </p>
    </div>

    <!-- Timeline Container -->
    <div class="timeline-container relative">
      <!-- Central Timeline Line -->
      <div class="absolute left-1/2 transform -translate-x-1/2 w-1 h-full bg-gradient-to-b from-cyan-500 via-purple-500 to-blue-500 opacity-30"></div>
      
      <!-- Timeline Items -->
      <div class="timeline-items space-y-8">
        {sortedEntries.map((entry, index) => (
          <TimelineItem entry={entry} index={index} />
        ))}
      </div>
      
      <!-- Timeline End -->
      <div class="flex justify-center mt-16">
        <div class="w-8 h-8 bg-gradient-to-r from-cyan-500 to-purple-500 rounded-full flex items-center justify-center">
          <div class="w-4 h-4 bg-slate-950 rounded-full"></div>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Timeline Scroll Animations -->
<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Intersection Observer for timeline animations
    const timelineObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const card = entry.target.querySelector('.timeline-card');
          if (card) {
            card.classList.add('animate-in');
          }
        }
      });
    }, {
      threshold: 0.3,
      rootMargin: '0px 0px -100px 0px'
    });

    // Observe all timeline items
    const timelineItems = document.querySelectorAll('.timeline-item');
    timelineItems.forEach(item => {
      timelineObserver.observe(item);
    });

    // Parallax effect for background elements
    const handleScroll = () => {
      const scrolled = window.pageYOffset;
      const parallax1 = document.querySelector('.parallax-bg-1') as HTMLElement;
      const parallax2 = document.querySelector('.parallax-bg-2') as HTMLElement;
      const parallax3 = document.querySelector('.parallax-bg-3') as HTMLElement;

      if (parallax1) {
        parallax1.style.transform = `translateY(${scrolled * 0.2}px) rotate(${scrolled * 0.05}deg)`;
      }
      if (parallax2) {
        parallax2.style.transform = `translateY(${scrolled * -0.1}px) rotate(${scrolled * -0.03}deg)`;
      }
      if (parallax3) {
        parallax3.style.transform = `translateY(${scrolled * 0.15}px) rotate(${scrolled * 0.02}deg)`;
      }
    };

    // Throttled scroll handler for performance
    let ticking = false;
    const onScroll = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          handleScroll();
          ticking = false;
        });
        ticking = true;
      }
    };

    window.addEventListener('scroll', onScroll);

    // Magnify effect on hover
    const timelineCards = document.querySelectorAll('.timeline-card');
    timelineCards.forEach(card => {
      const htmlCard = card as HTMLElement;
      card.addEventListener('mouseenter', () => {
        htmlCard.style.transform = 'scale(1.05) translateZ(0)';
        htmlCard.style.zIndex = '20';
      });
      
      card.addEventListener('mouseleave', () => {
        htmlCard.style.transform = 'scale(1) translateZ(0)';
        htmlCard.style.zIndex = '10';
      });
    });
  });
</script>

<style>
  .timeline-container {
    perspective: 1000px;
  }
  
  .timeline-card {
    will-change: transform;
    backface-visibility: hidden;
    transform-style: preserve-3d;
  }
  
  /* Custom animations */
  @keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-20px) rotate(5deg); }
  }
  
  .parallax-bg-1,
  .parallax-bg-2,
  .parallax-bg-3 {
    animation: float 20s ease-in-out infinite;
  }
  
  .parallax-bg-2 {
    animation-delay: -7s;
  }
  
  .parallax-bg-3 {
    animation-delay: -14s;
  }

  @media (max-width: 768px) {
    .timeline-container .absolute {
      display: none;
    }
    
    .timeline-items {
      padding-left: 2rem;
      border-left: 2px solid #64748b;
    }
  }
</style> 