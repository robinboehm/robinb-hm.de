---
import { getCollection } from 'astro:content';
import TimelineItem from './TimelineItem.astro';

// Get all timeline entries, sorted by date (newest first)
const timelineEntries = await getCollection('timeline');
const sortedEntries = timelineEntries.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);
---

<section class="parallax-timeline relative" id="timeline">
  <!-- Large Parallax Background Layers -->
  <div class="parallax-layer parallax-bg-1"></div>
  <div class="parallax-layer parallax-bg-2"></div>
  <div class="parallax-layer parallax-bg-3"></div>
  <div class="parallax-layer parallax-shapes"></div>
  
  <!-- Main Content -->
  <div class="relative z-10 min-h-screen">
    <!-- Hero Section -->
    <div class="parallax-hero flex items-center justify-center min-h-screen text-center">
      <div class="hero-content">
        <h2 class="text-6xl md:text-8xl font-bold text-white mb-8 drop-shadow-2xl">
          Meine Journey
        </h2>
        <p class="text-xl md:text-2xl text-cyan-300 max-w-2xl mx-auto drop-shadow-lg">
          Von der Universität zum Startup-Gründer - eine Reise durch die Tech-Welt
        </p>
        <div class="mt-12">
          <div class="animate-bounce">
            <svg class="w-8 h-8 text-cyan-400 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
            </svg>
          </div>
        </div>
      </div>
    </div>

    <!-- Timeline Section -->
    <div class="timeline-content relative py-32">
      <div class="container mx-auto px-6">
        <div class="timeline-line absolute left-1/2 transform -translate-x-1/2 w-1 bg-gradient-to-b from-cyan-400 via-purple-500 to-pink-500 opacity-50"></div>
        
        {sortedEntries.map((entry, index) => (
          <TimelineItem entry={entry} index={index} />
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  .parallax-timeline {
    position: relative;
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%);
    overflow: hidden;
  }
  
  .parallax-layer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 120vh;
    pointer-events: none;
    z-index: 1;
  }
  
  /* Large Mountain Silhouettes */
  .parallax-bg-1 {
    background: linear-gradient(180deg, transparent 40%, #1e293b 60%, #334155 100%);
    z-index: 1;
  }
  
  .parallax-bg-1::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 60%;
    background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1200 400'%3E%3Cpath fill='%23334155' d='M0,400 L0,200 Q100,120 200,180 Q300,100 400,160 Q500,80 600,140 Q700,60 800,120 Q900,40 1000,100 Q1100,20 1200,80 L1200,400 Z'/%3E%3C/svg%3E") no-repeat center bottom;
    background-size: cover;
    opacity: 0.7;
  }
  
  /* Middle Layer - Floating Geometric Shapes */
  .parallax-bg-2 {
    z-index: 2;
  }
  
  .parallax-bg-2::before,
  .parallax-bg-2::after {
    content: '';
    position: absolute;
    border-radius: 50%;
    background: linear-gradient(45deg, rgba(6, 182, 212, 0.1), rgba(139, 92, 246, 0.1));
    backdrop-filter: blur(1px);
  }
  
  .parallax-bg-2::before {
    width: 600px;
    height: 600px;
    top: 20%;
    left: -10%;
    animation: float 20s ease-in-out infinite;
  }
  
  .parallax-bg-2::after {
    width: 400px;
    height: 400px;
    top: 60%;
    right: -5%;
    animation: float 25s ease-in-out infinite reverse;
  }
  
  /* Front Layer - Additional Mountain Range */
  .parallax-bg-3 {
    z-index: 3;
  }
  
  .parallax-bg-3::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 40%;
    background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1200 300'%3E%3Cpath fill='%23475569' d='M0,300 L0,150 Q150,80 300,120 Q450,60 600,100 Q750,40 900,80 Q1050,20 1200,60 L1200,300 Z'/%3E%3C/svg%3E") no-repeat center bottom;
    background-size: cover;
    opacity: 0.6;
  }
  
  /* Floating Shapes Layer */
  .parallax-shapes {
    z-index: 4;
  }
  
  .parallax-shapes::before,
  .parallax-shapes::after {
    content: '';
    position: absolute;
    background: linear-gradient(135deg, rgba(6, 182, 212, 0.05), rgba(139, 92, 246, 0.05));
    border: 1px solid rgba(6, 182, 212, 0.1);
  }
  
  .parallax-shapes::before {
    width: 200px;
    height: 200px;
    top: 30%;
    right: 10%;
    transform: rotate(45deg);
    animation: rotate 30s linear infinite;
  }
  
  .parallax-shapes::after {
    width: 150px;
    height: 150px;
    top: 70%;
    left: 15%;
    border-radius: 50%;
    animation: float 35s ease-in-out infinite;
  }
  
  .timeline-line {
    height: 100%;
    min-height: 200vh;
  }
  
  .timeline-content {
    min-height: 200vh;
  }
  
  /* Animations */
  @keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    25% { transform: translateY(-30px) rotate(90deg); }
    50% { transform: translateY(-60px) rotate(180deg); }
    75% { transform: translateY(-30px) rotate(270deg); }
  }
  
  @keyframes rotate {
    0% { transform: rotate(45deg); }
    100% { transform: rotate(405deg); }
  }
  
  /* Hero styling */
  .hero-content {
    animation: heroFadeIn 2s ease-out;
  }
  
  @keyframes heroFadeIn {
    0% {
      opacity: 0;
      transform: translateY(50px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Timeline items visibility */
  .timeline-content {
    position: relative;
    z-index: 20; /* Ensure timeline content is above parallax layers */
  }
  
  /* Mobile optimizations */
  @media (max-width: 768px) {
    .parallax-layer {
      display: none; /* Disable on mobile for performance */
    }
    
    .parallax-timeline {
      background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
    }
  }
</style>

<script>
  // Dramatic Parallax Scrolling Effect
  function initParallax() {
    const parallaxLayers = document.querySelectorAll('.parallax-layer');
    
    if (window.innerWidth <= 768) {
      return; // Skip on mobile
    }
    
    let ticking = false;
    
    function updateParallax() {
      const scrolled = window.pageYOffset;
      const rate = scrolled * -0.5;
      
             // Different speeds for different layers - creating strong parallax effect
       if (parallaxLayers[0]) { // Background mountains - slowest
         (parallaxLayers[0] as HTMLElement).style.transform = `translateY(${scrolled * 0.1}px)`;
       }
       
       if (parallaxLayers[1]) { // Middle floating shapes - medium speed
         (parallaxLayers[1] as HTMLElement).style.transform = `translateY(${scrolled * 0.3}px)`;
       }
       
       if (parallaxLayers[2]) { // Front mountains - faster
         (parallaxLayers[2] as HTMLElement).style.transform = `translateY(${scrolled * 0.6}px)`;
       }
       
       if (parallaxLayers[3]) { // Geometric shapes - fastest
         (parallaxLayers[3] as HTMLElement).style.transform = `translateY(${scrolled * 0.8}px) rotate(${scrolled * 0.1}deg)`;
       }
      
      ticking = false;
    }
    
    function requestTick() {
      if (!ticking) {
        requestAnimationFrame(updateParallax);
        ticking = true;
      }
    }
    
    window.addEventListener('scroll', requestTick);
    
    // Initial call
    updateParallax();
  }
  
  // Initialize timeline animations
  function initTimelineAnimations() {
    const timelineObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const card = entry.target.querySelector('.timeline-card');
          if (card) {
            card.classList.add('animate-in');
          }
        }
      });
    }, {
      threshold: 0.3,
      rootMargin: '0px 0px -100px 0px'
    });

    // Observe all timeline items
    const timelineItems = document.querySelectorAll('.timeline-item');
    timelineItems.forEach(item => {
      timelineObserver.observe(item);
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initParallax();
      initTimelineAnimations();
    });
  } else {
    initParallax();
    initTimelineAnimations();
  }
</script> 